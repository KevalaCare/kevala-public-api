openapi: 3.0.0
info:
  title: Kevala API
  description: |-
    **NOTICE**: This API is currently under development. Some or all of the information on this page can change at any point before the finalized version of the API. This document will be updated throughout the development process.

    The Kevala API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) and utilizes the [JSON:API](https://jsonapi.org/) specification. Our API has predictable resource-oriented URLs and uses BasicAuth for authentication.
  version: 0.0.1
servers:
  - url: https://api.kevala.local:3001/v1
    description: Development
  - url: https://api.staging.kevala.care/v1
    description: Staging
  - url: https://api.kevala.care/v1
    description: Production
tags:
  - name: Employees
    description: Manage employees associated with your organization
  - name: Locations
    description: Manage locations associated with your organization
  - name: Positions
    description: Manage positions associated with your organization
  - name: Shift Allocations
    description: Manage shift allocations associated with your organization
  - name: Shifts
    description: Manage shifts shared with your organization
security:
  - basicAuth: []

paths:
  /employees:
    get:
      tags:
        - Employees
      summary: Get a list of employees
      parameters:
        - name: filters
          in: query
          description: Filters applied to the list of employees
          required: false
          schema:
            type: object
            properties:
              external_identifier:
                type: string
      responses:
        '200':
          description: A list of employees in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeListResponse'
    post:
      tags:
        - Employees
      summary: Create an employee
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/EmployeeResource'
      responses:
        '201':
          description: Created employee in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EmployeeResponse'
                  included:
                    $ref: '#/components/schemas/EmployeeIncludedList'
  /employees/{employeeId}:
    get:
      tags:
        - Employees
      summary: Get a single employee by ID
      parameters:
        - name: employeeId
          in: path
          description: ID of the employee to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single employee in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EmployeeResponse'
                  included:
                    $ref: '#/components/schemas/EmployeeIncludedList'
        '404':
          description: Employee not found
    patch:
      tags:
        - Employees
      summary: Update an existing employee
      parameters:
        - name: employeeId
          in: path
          description: ID of the employee to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/EmployeeResource'
      responses:
        '200':
          description: Updated employee in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EmployeeResponse'
                  included:
                    $ref: '#/components/schemas/EmployeeIncludedList'
        '404':
          description: Employee not found

  /locations:
    get:
      tags:
        - Locations
      summary: Get a list of locations
      responses:
        '200':
          description: A list of locations in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'

  /positions:
    get:
      tags:
        - Positions
      summary: Get a list of positions
      responses:
        '200':
          description: A list of positions in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/PositionListResponse'

  /shift_allocations:
    post:
      tags:
        - Shift Allocations
      summary: Create a shift allocation
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ShiftAllocationPostBody'
      responses:
        '200':
          description: Created shift allocation in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShiftAllocationResponse'

  /shift_allocations/{shiftAllocationId}:
    get:
      tags:
        - Shift Allocations
      summary: Get a single shift allocation by ID
      parameters:
        - name: shiftAllocationId
          in: path
          description: ID of the shift allocation to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single shift allocation in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShiftAllocationResponse'
                  included:
                    $ref: '#/components/schemas/ShiftAllocationIncludedList'
    patch:
      tags:
        - Shift Allocations
      summary: Update an existing shift allocation
      parameters:
        - name: shiftAllocationId
          in: path
          description: ID of the shift allocation to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ShiftAllocationPatchBody'
      responses:
        '200':
          description: Update shift allocation in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShiftAllocationResponse'

  /shifts:
    get:
      tags:
        - Shifts
      summary: Get a list of shifts
      responses:
        '200':
          description: A list of shifts in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ShiftListResponse'

  /shifts/{shiftId}:
    get:
      tags:
        - Shifts
      summary: Get a single shift by ID
      parameters:
        - name: shiftId
          in: path
          description: ID of the shift to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single shift in JSON:API format
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShiftResponse'
                  included:
                    $ref: '#/components/schemas/LocationResponse'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    EmployeeResource:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: [employees]
              example: 'employees'
            attributes:
              $ref: '#/components/schemas/EmployeeAttributes'
            relationships:
              $ref: '#/components/schemas/EmployeeRelationships'
          required:
            - type
            - attributes
            - relationships
      required:
        - data

    EmployeeAttributes:
      type: object
      properties:
        first_name:
          type: string
          example: 'John'
        middle_name:
          type: string
          example: 'Quincy'
        last_name:
          type: string
          example: 'Doe'
        birthdate:
          type: string
          format: date
          example: '1970-01-31'
        email:
          type: string
          example: 'john.doe@example.com'
        phone:
          type: string
          example: '+15555555555'
        start_date:
          type: string
          format: date
          example: '2000-12-31'
        external_identifier:
          type: string
          example: 'ABC-123'
        address:
          $ref: '#/components/schemas/Address'
      required:
        - first_name

    EmployeeRelationship:
      type: object
      required: [id, type]
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          enum: [shifts]
          example: 'employees'

    EmployeeRelationships:
      type: object
      required: [position, location]
      properties:
        position:
          type: object
          required: [data]
          properties:
            data:
              $ref: '#/components/schemas/PositionsRelationship'
        location:
          type: object
          required: [data]
          properties:
            data:
              $ref: '#/components/schemas/LocationsRelationship'

    Address:
      type: object
      properties:
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: Anytown
        state:
          type: string
          example: WA
        postal_code:
          type: string
          example: '12345'

    Facility:
      type: object
      properties:
        description:
          type: string
          example: 'Example Facility'
        required_equipment:
          type: string
          example: 'item one, item two, item three'
        staffing_primary_contact_name:
          type: string
          example: 'John Doe'
        staffing_primary_contact_phone:
          type: string
          example: '+15555555555'

    EmployeeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeResponse'
        included:
          $ref: '#/components/schemas/EmployeeIncludedList'

    EmployeeResponse:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          example: 'employees'
        attributes:
          $ref: '#/components/schemas/EmployeeAttributes'
        relationships:
          $ref: '#/components/schemas/EmployeeRelationships'
      required:
        - id
        - type
        - attributes

    EmployeeIncludedList:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/LocationResponse'
          - $ref: '#/components/schemas/PositionResponse'

    LocationResponse:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          example: 'locations'
        attributes:
          $ref: '#/components/schemas/LocationAttributes'
      required:
        - id
        - type
        - attributes

    LocationListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationResponse'

    LocationAttributes:
      type: object
      properties:
        name:
          type: string
          example: 'Headquarters'
        timezone:
          type: string
          example: 'US/Pacific'
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'

    LocationsRelationship:
      type: object
      required: [id, type]
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          enum: [locations]
          example: 'locations'

    PositionResponse:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          example: 'positions'
        attributes:
          $ref: '#/components/schemas/PositionAttributes'
      required:
        - id
        - type

    PositionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PositionResponse'

    PositionAttributes:
      type: object
      properties:
        title:
          type: string
          example: 'Manager'

    PositionsRelationship:
      type: object
      required: [id, type]
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          enum: [positions]
          example: 'positions'

    ShiftListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ShiftResponse'
        included:
          type: array
          items:
            $ref: '#/components/schemas/LocationResponse'

    ShiftResponse:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          example: 'shifts'
        attributes:
          $ref: '#/components/schemas/ShiftAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/LocationsRelationship'
      required:
        - id
        - type

    ShiftAttributes:
      type: object
      properties:
        status:
          type: string
          example: 'open'
        starts_at:
          type: string
          format: date-time
          example: '2020-01-01T06:00:00.000000Z'
        ends_at:
          type: string
          format: date-time
          example: '2020-01-01T22:00:00.000000Z'
        positions:
          type: array
          items:
            type: string
          example: ['rn']
        inserted_at:
          type: string
          format: date-time
          example: '2020-01-01T06:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T06:00:00.000000Z'
        rates:
          type: array
          items:
            type: object
            properties:
              position:
                type: string
                example: 'rn'
              currency:
                type: string
                example: 'USD'
              bill_rate:
                type: integer
                description: "Decimal value in cents. Example: 6000 = $60.00"
                example: 6000
              pay_rate:
                type: integer
                description: "Decimal value in cents. Example: 5000 = $50.00"
                example: 5000

    ShiftRelationship:
      type: object
      required: [id, type]
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          enum: [shifts]
          example: 'shifts'

    ShiftAllocationAttributes:
      type: object
      properties:
        comment:
          type: string
          example: 'Example comment'
        position:
          type: string
          example: 'rn'
        status:
          type: string
          example: 'pending'
        inserted_at:
          type: string
          format: date-time
          example: '2020-01-01T06:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T06:00:00.000000Z'

    ShiftAllocationRelationships:
      type: object
      required: [employee, shift]
      properties:
        employee:
          type: object
          required: [data]
          properties:
            data:
              $ref: '#/components/schemas/EmployeeRelationship'
        shift:
          type: object
          required: [data]
          properties:
            data:
              $ref: '#/components/schemas/ShiftRelationship'

    ShiftAllocationResponse:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          example: 'shift_allocations'
        attributes:
          $ref: '#/components/schemas/ShiftAllocationAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/ShiftAllocationRelationships'
      required:
        - id
        - type

    ShiftAllocationIncludedList:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/EmployeeResponse'
          - $ref: '#/components/schemas/ShiftResponse'

    ShiftAllocationPatchBody:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'shift_allocations'
            id:
              type: string
              example: '1'
            attributes:
              type: object
              properties:
                status:
                  type: string
                  example: 'withdrawn'
          required:
            - type
            - id
            - attributes
            - relationships
      required:
        - data

    ShiftAllocationPostBody:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: 'shift_allocations'
            attributes:
              type: object
              properties:
                comment:
                  type: string
                  example: 'Example comment'
            relationships:
              type: array
              items:
                $ref: '#/components/schemas/ShiftAllocationRelationships'
          required:
            - type
            - id
            - attributes
            - relationships
      required:
        - data
